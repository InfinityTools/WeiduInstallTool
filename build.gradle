import org.apache.tools.ant.taskdefs.condition.Os

plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.1.0'
  id 'org.beryx.jlink' version '3.0.0'
}

group 'io.infinitytools'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

String appName
String projectUrl

ext {
  junitVersion = '5.9.2'

  // App version is stored in a global properties file
  Properties _props = new Properties()
  _props.load(file("src/main/resources/globals.properties").newDataInputStream())
  project.version = _props.getProperty("version")
  appName = _props.getProperty("name", "WeiduModLauncher")
  projectUrl = _props.getProperty("project", "https://github.com/InfinityTools/WeiduModLauncher")
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

// Workaround for accessing GitHub API
final String TLS_PROTOCOL = "-Djdk.tls.client.protocols=TLSv1.2"

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
  options.debugOptions.setDebugLevel("source,lines,vars")
  options.debug = true
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  jvmArgs += TLS_PROTOCOL
}

tasks.withType(JavaExec).configureEach {
  jvmArgs += TLS_PROTOCOL
}

application {
  mainModule = 'io.infinitytools.wml'
  mainClass = 'io.infinitytools.wml.WeiduModLauncher'
}

javafx {
  version = "21"
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  // https://mvnrepository.com/artifact/org.json/json
  implementation group: 'org.json', name: 'json', version: '20230618'
  // https://tinylog.org/v2/download/
  implementation group: 'org.tinylog', name: 'tinylog-api', version: '2.6.2'
  implementation group: 'org.tinylog', name: 'tinylog-impl', version: '2.6.2'
  // https://mvnrepository.com/artifact/org.apache.commons/commons-text
  implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
  useJUnitPlatform()
}

String distFolder = "distribution"

jlink {
  imageZip.fileValue(project.file("${layout.buildDirectory}/distributions/app-${javafx.platform.classifier}.zip"))
  addOptions('--strip-debug', '--compress', 'zip-6', '--no-header-files', '--no-man-pages')
  addExtraDependencies("javafx")

  launcher {
    name = "${appName}"
    noConsole = false
  }

  jpackage {
    outputDir = distFolder

    jvmArgs = [
            TLS_PROTOCOL
    ]

    installerOptions = [
            "--verbose",
            "--copyright", "Copyright Â© 2023 Argent77",
            "--description", "A graphical front end for WeiDU.",
    ]

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      imageOptions = [
              "--icon", "${projectDir}/buildres/windows/wml.ico"
      ]
      installerType = "exe"
      installerOptions.addAll([
              "--icon", "${projectDir}/buildres/windows/wml.ico",
              "--resource-dir", "${projectDir}/buildres/windows",
              "--file-associations", "${projectDir}/buildres/windows/open_with.properties",
              "--win-dir-chooser",
              "--win-per-user-install",
              "--win-shortcut",
              "--win-shortcut-prompt",
              "--win-menu",
              "--about-url", "${projectUrl}"
      ])
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
      // macOS installer requires a version number >= 1.0.0
      appVersion = project.version.toString().startsWith("0.") ? "1.0.0" : project.version

      imageOptions = [
              "--icon", "${projectDir}/buildres/macos/wml.icns",
      ]
      installerType = "pkg"
      installerOptions.addAll([
              "--mac-package-name", "${appName}",
              "--resource-dir", "${projectDir}/buildres/macos",
              "--file-associations", "${projectDir}/buildres/macos/open_with.properties"
      ])
    } else if (Os.isFamily(Os.FAMILY_UNIX)) {
      // Unix check must be performed AFTER macOS check since it includes macOS check as well
      imageOptions = [
              "--icon", "${projectDir}/src/main/resources/io/infinitytools/wml/icons/icon/256x256.png",
      ]
      // Let jpackage determine output format automatically
      // installerType = "deb"
      installerOptions.addAll([
              "--resource-dir", "${projectDir}/buildres/linux",
              "--file-associations", "${projectDir}/buildres/linux/open_with.properties",
              "--linux-rpm-license-type", "Apache-2.0",
              "--linux-shortcut"
      ])
    }
  }
}

// Creates a portable zip archive from the jpackage image resources.
tasks.register('portableZip', Zip) {
  dependsOn ':jpackageImage'

  archiveFileName = "${appName}-portable-${getOsName()}-${version}.zip"
  destinationDirectory = layout.buildDirectory.dir(distFolder)

  from(layout.buildDirectory.dir("${distFolder}/${appName}")) {
    into appName
  }
}

// Creates a portable gzip-compressed tar archive from the jpackage image resources.
tasks.register('portableTar', Tar) {
  dependsOn ':jpackageImage'

  archiveFileName = "${appName}-portable-${getOsName()}-${version}.tar.gz"
  destinationDirectory = layout.buildDirectory.dir(distFolder)
  compression = Compression.GZIP

  from(layout.buildDirectory.dir("${distFolder}/${appName}")) {
    into appName
  }
}

// Returns a short identifier string for the current operating system.
static String getOsName() {
  String platform
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    platform = "win"
  } else if (Os.isFamily(Os.FAMILY_MAC)) {
    platform = "macos"
  } else if (Os.isFamily(Os.FAMILY_UNIX)) {
    platform = "linux"
  } else {
    platform = "unknown"
  }

  return platform
}
